#!/usr/bin/env python
'''
Copyright 2017, Fujitsu Network Communications, Inc.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
'''
import sys
if sys.version_info < (2, 7):
    print("Warrior doesn't support Python version lower than 2.7, now exiting")
    sys.exit(0)
try:
    import os
    print "import os was successful"
    import shutil
    print "import shutil was successful"
    import Framework.Utils.email_utils as email
    print "import email was successful"
    import Framework.Utils as Utils
    print "import Utils was successful"
    from Framework.Utils.print_Utils import print_error, print_info
    print "import print_Utils was successful"
    from WarriorCore import warrior_cli_driver, testcase_driver, testsuite_driver, project_driver
    print "import warrior_cli_driver, testcase_driver, testsuite_driver, project_driver were successful"
    from WarriorCore import ironclaw_driver, framework_detail
    print "import ironclaw_driver, framework_detail were successful"
    from WarriorCore.Classes.jira_rest_class import Jira
    print "import jira_rest_class was successful"
    from Framework.ClassUtils import database_utils_class
    print "import database_utils_class was successful"
except:
    print "\033[1;31m*********************************************"
    print " !-Unable to import library in Warrior executable"
    print " !-Successful imported libraries are printed above"
    print " !-Please check your import statements for any code added to the framework"
    print " !-Possible cause could be circular import"
    print "*********************************************\033[0m"
    raise
"""
This is the Warrior executable
"""

CSE_EXEC = False
AUTO_DEFECTS = False
IRON_CLAW = False
VERSION = False


def update_jira_by_id(jiraproj, jiraid, exec_dir, status):
    """ If jiraid is provided, upload the log and result file to jira """
    if jiraid is not False:
        jira_obj = Jira(jiraproj)
        if jira_obj.status is True:
            # Get the current jira issue status
            issue_status = jira_obj.get_jira_issue_status(jiraid)
            isReopend = False
            # Reopen the jira issue if it is closed, to upload the execution logs
            if issue_status and issue_status.lower() == "closed":
                print_info("Reopening Jira issue '{0}' to upload warrior "
                           "execution logs".format(jiraid))
                jira_obj.set_jira_issue_status(jiraid, "Reopened")
                isReopend = True
            # Upload execution logs
            zip_file = shutil.make_archive(exec_dir, 'zip', exec_dir)
            jira_obj.upload_logfile_to_jira_issue(jiraid, zip_file)
            # Close the jira issue if it is reopened in the above if block
            if isReopend is True:
                print_info("Closing Jira issue '{0}' which was reopened "
                           "earlier".format(jiraid))
                jira_obj.set_jira_issue_status(jiraid, "Closed")
            # Update Jira issue based on warrior execution status
            jira_obj.update_jira_issue(jiraid, status)
    else:
        print_info("jiraid not provided, will not update jira issue")

def main(parameter_list, a_defects, cse_execution, iron_claw, jiraproj, overwrite, jiraid, dbsystem, headless):
    """Parses the input parameters (i.e. sys.argv)
        If the input parameter is an xml file:
            - check if file exists, if exists
                - if the input is a testcase xml file, execute the testcase
                - if the input is a testsuite xml file, excute the testsuite
                - if the input is a project xml file, excute the project

        If the input is not an xml file:
            - check if it is a json object/array respresenting a valid Warrior
            suite structure, if yes to execute a build
    Arguments:
        1. parameter_list = list of command line parameters supplied by
        the user to execute Warrior
    """
    status = False

    if cse_execution:
        status = cse_command_line_exec()
    elif iron_claw:
        status = ironclaw_driver.main(parameter_list)
    else:
        abs_cur_dir = os.path.abspath(os.curdir)
        status = True
        db_obj = database_utils_class.create_database_connection(dbsystem=dbsystem)
        for parameter in parameter_list:
            result = False
            # check if the input parameter is an xml file
            if Utils.file_Utils.get_extension_from_path(parameter) == '.xml':
                filepath = parameter
                framework_detail.warrior_banner()
                abs_filepath = Utils.file_Utils.getAbsPath(filepath, abs_cur_dir)
                print_info('Absolute path: {0}'.format(abs_filepath))
                if Utils.file_Utils.fileExists(abs_filepath):
                    if len(overwrite.items()) > 0:
                        default_repo = overwrite
                    else:
                        default_repo = {}

                    if db_obj is not False and db_obj.status is True:
                        default_repo.update({'db_obj': db_obj})
                    else:
                        default_repo.update({'db_obj': False})

                    default_repo["wt_enable_headless"] = True if headless else False

                    if Utils.xml_Utils.getRoot(abs_filepath).tag == 'Testcase':
                        default_repo['war_file_type'] = "Case"
                        result, tc_duration, data_repository = testcase_driver.main(
                                abs_filepath, data_repository=default_repo,
                                runtype='SEQUENTIAL_KEYWORDS',
                                auto_defects=a_defects, jiraproj=jiraproj)
                        update_jira_by_id(jiraproj, jiraid, os.path.dirname(
                                            data_repository['wt_resultsdir']), result)
                        email.compose_send_email("Test Case: ", abs_filepath,
                                                 data_repository['wt_logsdir'],
                                                 data_repository['wt_resultsdir'], result)
                    elif Utils.xml_Utils.getRoot(abs_filepath).tag == 'TestSuite':
                        default_repo['war_file_type'] = "Suite"
                        result, suite_repository = testsuite_driver.main(
                                abs_filepath, auto_defects=a_defects,
                                jiraproj=jiraproj, data_repository=default_repo)
                        update_jira_by_id(jiraproj, jiraid,
                                          suite_repository['suite_execution_dir'], result)
                        email.compose_send_email("Test Suite: ", abs_filepath,
                                                 suite_repository['ws_logs_execdir'],
                                                 suite_repository['ws_results_execdir'], result)
                    elif Utils.xml_Utils.getRoot(abs_filepath).tag == 'Project':
                        default_repo['war_file_type'] = "Project"
                        result, project_repository = project_driver.main(
                                abs_filepath, auto_defects=a_defects,
                                jiraproj=jiraproj, data_repository=default_repo)
                        update_jira_by_id(jiraproj, jiraid,
                                          project_repository['project_execution_dir'], result)
                        email.compose_send_email("Project: ", abs_filepath,
                                                 project_repository['wp_logs_execdir'],
                                                 project_repository['wp_results_execdir'], result)
                    else:
                        print_error("Unrecognized root tag in the input xml file ! exiting!!!")
                else:
                    print_error("file does not exist !! exiting!!")
            else:
                print_error("unrecognized file format !!!")
            status = status and result
        if db_obj is not False and db_obj.status is True:
            db_obj.close_connection()
    return status

if __name__ == '__main__':

    FILEPATH, AUTO_DEFECTS, version, CSE_EXEC, IRON_CLAW, JIRAPROJ, \
    OVERWRITE, JIRAID, DBSYSTEM, HEADLESS = warrior_cli_driver.main(sys.argv[1:])
    if version:
        framework_detail.warrior_framework_details()
        sys.exit(0)
    if not CSE_EXEC and len(FILEPATH) == 0:
        print_error("Provide atleast one xml file to execute")
    status = main(FILEPATH, AUTO_DEFECTS, CSE_EXEC, IRON_CLAW,
                  JIRAPROJ, OVERWRITE, JIRAID, DBSYSTEM, HEADLESS)
    status = {"true": True, "pass": True, "ran": "RAN"}.get(str(status).lower())
    if status is True or status == "RAN":
        print_info("DONE 0")
        sys.exit(0)
        print "This line should not be printed"
    else:
        print_info("DONE 1")
        sys.exit(1)
        print "This line should not be printed"
