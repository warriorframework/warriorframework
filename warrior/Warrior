#!/usr/bin/env python
'''
Copyright 2017, Fujitsu Network Communications, Inc.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
'''
import sys
if sys.version_info < (2, 7):
    print("Warrior doesn't support Python version lower than 2.7, now exiting")
    sys.exit(0)
try:
    import os
    import re
    import subprocess
    import shutil
    import Framework.Utils.email_utils as email
    import Framework.Utils as Utils
    from Framework.Utils.print_Utils import print_error, print_info
    from WarriorCore import warrior_cli_driver, testcase_driver, testsuite_driver, project_driver
    from WarriorCore import ironclaw_driver, mockrun_driver, framework_detail
    from WarriorCore.Classes.jira_rest_class import Jira
    from Framework.ClassUtils import database_utils_class
except:
    raise
"""
This is the Warrior executable
"""

CSE_EXEC = False
AUTO_DEFECTS = False
IRON_CLAW = False
VERSION = False


def update_jira_by_id(jiraproj, jiraid, exec_dir, status):
    """ If jiraid is provided, upload the log and result file to jira """
    if jiraid is not False:
        jira_obj = Jira(jiraproj)
        if jira_obj.status is True:
            if jira_obj.update_jira_issue(jiraid, status):
                zip_file = shutil.make_archive(exec_dir, 'zip', exec_dir)
                jira_obj.upload_logfile_to_jira_issue(jiraid, zip_file)
    else:
        print_info("jiraid not provided, will not update jira issue")

def notify_send_for_exit_status(exit_status):
        if exit_status is "Done_0":
                os_name = subprocess.check_output('lsb_release -ds', shell=True)

                if "Red Hat" in os_name or "Mandriva" in os_name or "Mandrake" in os_name or "Fedora" in os_name or "SuSE" in os_name or "CentOS" in os_name :
                        val1 = subprocess.check_output('rpm -qa | grep libnotify', stderr=subprocess.STDOUT, shell=True)

                        res1 = re.search("libnotify4", val1)
                        res2 = re.search("libnotify-bin", val1)
                        if res1 is not None or res2 is not None:
                                os.system('notify-send "Warrior Execution Passed" -i dialog-ok')
                                print "\a"

                elif "buntu" in os_name or "KNOPPIX" in os_name:
                        val1 = subprocess.check_output('dpkg -l | grep libnotify', stderr=subprocess.STDOUT, shell=True)

                        res1 = re.search("libnotify4", val1)
                        res2 = re.search("libnotify-bin", val1)
                        if res1 is not None or res2 is not None:
                                os.system('notify-send "Warrior Execution Passed" -i dialog-ok')
                                print "\a"

                elif "Slax" in os_name:
                        val1 = subprocess.check_output('ls /var/log/packages | grep libnotify', stderr=subprocess.STDOUT, shell=True)

                        res1 = re.search("libnotify4", val1)
                        res2 = re.search("libnotify-bin", val1)
                        if res1 is not None or res2 is not None:
                                os.system('notify-send "Warrior Execution Passed" -i dialog-ok')
                                print "\a"

                elif "gentoo" in os_name:
                        val1 = subprocess.check_output('equery list "*" | grep libnotify', stderr=subprocess.STDOUT, shell=True)

                        res1 = re.search("libnotify4", val1)
                        res2 = re.search("libnotify-bin", val1)
                        if res1 is not None or res2 is not None:
                                os.system('notify-send "Warrior Execution Passed" -i dialog-ok')
                                print "\a"

                elif "Arch" in os_name:
                        val1 = subprocess.check_output('pacman -Ql "libnotify"', stderr=subprocess.STDOUT, shell=True)

                        res1 = re.search("libnotify4", val1)
                        res2 = re.search("libnotify-bin", val1)
                        if res1 is not None or res2 is not None:
                                os.system('notify-send "Warrior Execution Passed" -i dialog-ok')
                                print "\a"

                else:
                        print ""

        elif exit_status is "Done_1":
                os_name = subprocess.check_output('lsb_release -ds', shell=True)

                if "Red Hat" in os_name or "Mandriva" in os_name or "Mandrake" in os_name or "Fedora" in os_name or "SuSE" in os_name or "CentOS" in os_name :
                        val1 = subprocess.check_output('rpm -qa | grep libnotify', stderr=subprocess.STDOUT, shell=True)

                        res1 = re.search("libnotify4", val1)
                        res2 = re.search("libnotify-bin", val1)
                        if res1 is not None or res2 is not None:
                                os.system('notify-send "Warrior Execution Failed" -i dialog-ok')
                                print "\a"

                elif "buntu" in os_name or "KNOPPIX" in os_name:
                        val1 = subprocess.check_output('dpkg -l | grep libnotify', stderr=subprocess.STDOUT, shell=True)

                        res1 = re.search("libnotify4", val1)
                        res2 = re.search("libnotify-bin", val1)
                        if res1 is not None or res2 is not None:
                                os.system('notify-send "Warrior Execution Failed" -i dialog-ok')
                                print "\a"

                elif "Slax" in os_name:
                        val1 = subprocess.check_output('ls /var/log/packages | grep libnotify', stderr=subprocess.STDOUT, shell=True)

                        res1 = re.search("libnotify4", val1)
                        res2 = re.search("libnotify-bin", val1)
                        if res1 is not None or res2 is not None:
                                os.system('notify-send "Warrior Execution Failed" -i dialog-ok')
                                print "\a"

                elif "gentoo" in os_name:
                        val1 = subprocess.check_output('equery list "*" | grep libnotify', stderr=subprocess.STDOUT, shell=True)

                        res1 = re.search("libnotify4", val1)
                        res2 = re.search("libnotify-bin", val1)
                        if res1 is not None or res2 is not None:
                                os.system('notify-send "Warrior Execution Failed" -i dialog-ok')
                                print "\a"

                elif "Arch" in os_name:
                        val1 = subprocess.check_output('pacman -Ql "libnotify"', stderr=subprocess.STDOUT, shell=True)

                        res1 = re.search("libnotify4", val1)
                        res2 = re.search("libnotify-bin", val1)
                        if res1 is not None or res2 is not None:
                                os.system('notify-send "Warrior Execution Failed" -i dialog-ok')
                                print "\a"

                else:
                        print ""
        else:
                print ""

def main(parameter_list, mockrun, a_defects, cse_execution, iron_claw,
         jiraproj, overwrite, jiraid, dbsystem):
    """Parses the input parameters (i.e. sys.argv)
        If the input parameter is an xml file:
            - check if file exists, if exists
                - if the input is a testcase xml file, execute the testcase
                - if the input is a testsuite xml file, excute the testsuite
                - if the input is a project xml file, excute the project

        If the input is not an xml file:
            - check if it is a json object/array respresenting a valid Warrior
            suite structure, if yes to execute a build
    Arguments:
        1. parameter_list = list of command line parameters supplied by
        the user to execute Warrior
    """
    status = False

    if cse_execution:
        status = cse_command_line_exec()
    elif iron_claw:
        status = ironclaw_driver.main(parameter_list)
    else:
        abs_cur_dir = os.path.abspath(os.curdir)
        status = True
        db_obj = database_utils_class.create_database_connection(dbsystem=dbsystem)
        for parameter in parameter_list:
            result = False
            # check if the input parameter is an xml file
            if Utils.file_Utils.get_extension_from_path(parameter) == '.xml':
                filepath = parameter
                framework_detail.warrior_banner()
                abs_filepath = Utils.file_Utils.getAbsPath(filepath, abs_cur_dir)
                print_info('Absolute path: {0}'.format(abs_filepath))
                if Utils.file_Utils.fileExists(abs_filepath):
                    if len(overwrite.items()) > 0:
                        default_repo = overwrite
                    else:
                        default_repo = {}

                    if db_obj is not False and db_obj.status is True:
                        default_repo.update({'db_obj': db_obj})
                    else:
                        default_repo.update({'db_obj': False})

                    if mockrun:
                        result = mockrun_driver.main(abs_filepath, len(parameter_list))
                    elif Utils.xml_Utils.getRoot(abs_filepath).tag == 'Testcase':
                        default_repo['war_file_type'] = "Case"
                        result, tc_duration, data_repository = testcase_driver.main(
                                abs_filepath, data_repository=default_repo,
                                runtype='SEQUENTIAL_KEYWORDS',
                                auto_defects=a_defects, jiraproj=jiraproj)
                        update_jira_by_id(jiraproj, jiraid, os.path.dirname(
                                            data_repository['wt_resultsdir']), result)
                        email.compose_send_email("Test Case: ", abs_filepath,
                                                 data_repository['wt_logsdir'],
                                                 data_repository['wt_resultsdir'], result)
                    elif Utils.xml_Utils.getRoot(abs_filepath).tag == 'TestSuite':
                        default_repo['war_file_type'] = "Suite"
                        result, suite_repository = testsuite_driver.main(
                                abs_filepath, auto_defects=a_defects,
                                jiraproj=jiraproj, data_repository=default_repo)
                        update_jira_by_id(jiraproj, jiraid,
                                          suite_repository['suite_execution_dir'], result)
                        email.compose_send_email("Test Suite: ", abs_filepath,
                                                 suite_repository['ws_logs_execdir'],
                                                 suite_repository['ws_results_execdir'], result)
                    elif Utils.xml_Utils.getRoot(abs_filepath).tag == 'Project':
                        default_repo['war_file_type'] = "Project"
                        result, project_repository = project_driver.main(
                                abs_filepath, auto_defects=a_defects,
                                jiraproj=jiraproj, data_repository=default_repo)
                        update_jira_by_id(jiraproj, jiraid,
                                          project_repository['project_execution_dir'], result)
                        email.compose_send_email("Project: ", abs_filepath,
                                                 project_repository['wp_logs_execdir'],
                                                 project_repository['wp_results_execdir'], result)
                    else:
                        print_error("Unrecognized root tag in the input xml file ! exiting!!!")
                else:
                    print_error("file does not exist !! exiting!!")
            else:
                print_error("unrecognized file format !!!")
            status = status and result
        if db_obj is not False and db_obj.status is True:
            db_obj.close_connection()
    return status

if __name__ == '__main__':

    (FILEPATH, mockrun, AUTO_DEFECTS, version, CSE_EXEC, IRON_CLAW, JIRAPROJ,
     OVERWRITE, JIRAID, DBSYSTEM) = warrior_cli_driver.main(sys.argv[1:])
    if version:
        framework_detail.warrior_framework_details()
        sys.exit(0)
    if not CSE_EXEC and len(FILEPATH) == 0:
        print_error("Provide at least one xml file to execute")
    status = main(FILEPATH, mockrun, AUTO_DEFECTS, CSE_EXEC, IRON_CLAW,
                  JIRAPROJ, OVERWRITE, JIRAID, DBSYSTEM)
    status = {"true": True, "pass": True}.get(str(status).lower())
    if status is True:
        print_info("DONE 0")
        exit_status = "Done_0"
        notify_send_for_exit_status(exit_status)
        sys.exit(0)
        print "This line should not be printed"
    else:
        print_info("DONE 1")
        exit_status = "Done_1"
        notify_send_for_exit_status(exit_status)
        sys.exit(1)
        print "This line should not be printed"
